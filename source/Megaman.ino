

#include <Time.h>
#include <TimeLib.h>
#include <PxMatrix.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>

#include <Ticker.h>
Ticker display_ticker;

// Pins for LED MATRIX
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

uint8_t display_draw_time=0;

PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);

// WiFi
const static char ssid[] = "TeraTechnologies";
const static char pass[] = "A4150F1243";

// NTP Servers
static const char ntpServerName[] = "us.pool.ntp.org";
//static const char ntpServerName[] = "time.nist.gov";
//static const char ntpServerName[] = "time-a.timefreq.bldrdoc.gov";
//static const char ntpServerName[] = "time-b.timefreq.bldrdoc.gov";
//static const char ntpServerName[] = "time-c.timefreq.bldrdoc.gov";

WiFiUDP Udp;
unsigned int localPort = 2390;      // local port to listen for UDP packets

// NTP
const int NTP_PACKET_SIZE = 48; // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; //buffer to hold incoming & outgoing packets

//const int timeZone = -6;   // Central Standard Time (USA)
const int timeZone = -5;  // Central Daylight Time (USA)
//const int timeZone = -5;  // Eastern Standard Time (USA)
//const int timeZone = -4;  // Eastern Daylight Time (USA)
//const int timeZone = -8;  // Pacific Standard Time (USA)
//const int timeZone = -7;  // Pacific Daylight Time (USA)
//const int timeZone = 1;   // Central European Time

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};

uint16_t sinX;
uint8_t  xPos;
uint8_t  yPos;
const int centerY = 15;
const long interval = 50;
const float pi = 3.14159;
const int circleDeg = 360;
unsigned long previousMillis = 0;
const static uint8_t script[] = {
    0,0,0,0,1,1,0,0,0,0,2,4,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5,4,3,4,5
};
char theTime[6] = "88:88";
const static uint16_t nums[10][63] PROGMEM = {
  // 0
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 1
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16)
  0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 2
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 3
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 4
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 5
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 6
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 7
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,  
  },
  // 8
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  },
  // 9
  {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60,   // 0x0010 (16)
  0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60,   // 0x0020 (32)
  0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60,   // 0x0030 (48)
  0xF81F, 0xF81F, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
  }
};
const static uint16_t clockSep[27] PROGMEM = {
  0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16)
  0xFE60, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,
};

const static uint16_t images[6][576] PROGMEM = {
  // Frame 1
  {
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
    0xF81F, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B, 0x0000,   // 0x0040 (64) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x0050 (80) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B,   // 0x0070 (112) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B,   // 0x0080 (128) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0090 (144) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0x039D, 0x039D,   // 0x00A0 (160) pixels
    0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B,   // 0x00B0 (176) pixels
    0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5, 0x0000,   // 0x00D0 (208) pixels
    0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000,   // 0x00E0 (224) pixels
    0x039D, 0xFED5, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0xFED5, 0xFFFF, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0x0000, 0x0000, 0x0000, 0x0000, 0xFED5,   // 0x0100 (256) pixels
    0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x075B, 0x075B, 0x075B,   // 0x0110 (272) pixels
    0x075B, 0x0000, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0120 (288) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x075B,   // 0x0130 (304) pixels
    0x075B, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000,   // 0x0140 (320) pixels
    0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0150 (336) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000,   // 0x0160 (352) pixels
    0x0000, 0x0000, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000,   // 0x0170 (368) pixels
    0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0180 (384) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x0190 (400) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0x0000,   // 0x01A0 (416) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01B0 (432) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B,   // 0x01C0 (448) pixels
    0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D,   // 0x01D0 (464) pixels
    0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01E0 (480) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D,   // 0x01F0 (496) pixels
    0x039D, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D,   // 0x0200 (512) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0210 (528) pixels
    0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D,   // 0x0220 (544) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0230 (560) pixels
    0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F,   // 0x0240 (576) pixels
  },
  // Frame 2
  {
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
    0xF81F, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B, 0x0000,   // 0x0040 (64) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x0050 (80) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B,   // 0x0070 (112) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B,   // 0x0080 (128) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0090 (144) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x039D, 0x039D,   // 0x00A0 (160) pixels
    0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B,   // 0x00B0 (176) pixels
    0x039D, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0xFED5, 0x0000, 0x0000, 0x0000, 0x0000, 0xFED5, 0x0000,   // 0x00D0 (208) pixels
    0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000,   // 0x00E0 (224) pixels
    0x039D, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0x0000, 0x0000, 0x0000, 0x0000, 0xFED5,   // 0x0100 (256) pixels
    0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x075B, 0x075B, 0x075B,   // 0x0110 (272) pixels
    0x075B, 0x0000, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0120 (288) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x075B,   // 0x0130 (304) pixels
    0x075B, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000,   // 0x0140 (320) pixels
    0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0150 (336) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000,   // 0x0160 (352) pixels
    0x0000, 0x0000, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000,   // 0x0170 (368) pixels
    0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0180 (384) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x0190 (400) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0x0000,   // 0x01A0 (416) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01B0 (432) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B,   // 0x01C0 (448) pixels
    0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D,   // 0x01D0 (464) pixels
    0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01E0 (480) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D,   // 0x01F0 (496) pixels
    0x039D, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D,   // 0x0200 (512) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0210 (528) pixels
    0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D,   // 0x0220 (544) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0230 (560) pixels
    0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F,   // 0x0240 (576) pixels
  },
  // Frame 3
  {
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F,   // 0x0010 (16) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
    0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B,   // 0x0040 (64) pixels
    0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0050 (80) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B,   // 0x0070 (112) pixels
    0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x0080 (128) pixels
    0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0090 (144) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0x039D,   // 0x00A0 (160) pixels
    0x039D, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x00B0 (176) pixels
    0x075B, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5,   // 0x00D0 (208) pixels
    0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x00E0 (224) pixels
    0x0000, 0x039D, 0xFED5, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0xFED5, 0xFFFF, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
    0xFED5, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x075B, 0x075B,   // 0x0110 (272) pixels
    0x075B, 0x075B, 0x0000, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0120 (288) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0130 (304) pixels
    0x075B, 0x075B, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B,   // 0x0140 (320) pixels
    0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F,   // 0x0150 (336) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B,   // 0x0160 (352) pixels
    0x0000, 0x0000, 0x0000, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x0170 (368) pixels
    0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F,   // 0x0180 (384) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D,   // 0x0190 (400) pixels
    0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F,   // 0x01A0 (416) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x01B0 (432) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x075B,   // 0x01C0 (448) pixels
    0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D,   // 0x01D0 (464) pixels
    0x039D, 0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01E0 (480) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000, 0x0000, 0x0000, 0x039D, 0x039D,   // 0x01F0 (496) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D,   // 0x0200 (512) pixels
    0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0210 (528) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D,   // 0x0220 (544) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0230 (560) pixels
    0x0000, 0x0000, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0240 (576) pixels
  },
  // Frame 4
  {
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F,   // 0x0040 (64) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0050 (80) pixels
    0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B,   // 0x0070 (112) pixels
    0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0080 (128) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0090 (144) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B,   // 0x00A0 (160) pixels
    0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000,   // 0x00B0 (176) pixels
    0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0x075B, 0x039D, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0x039D,   // 0x00D0 (208) pixels
    0x039D, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x0000, 0x075B, 0x075B, 0x0000,   // 0x00E0 (224) pixels
    0x075B, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
    0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5,   // 0x0100 (256) pixels
    0x0000, 0xFFFF, 0x0000, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B,   // 0x0110 (272) pixels
    0x0000, 0x039D, 0xFED5, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0xFED5, 0xFFFF, 0xFED5, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x0120 (288) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0130 (304) pixels
    0xFED5, 0x0000, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x075B,   // 0x0140 (320) pixels
    0x075B, 0x075B, 0x0000, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0x075B, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x0150 (336) pixels
    0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0160 (352) pixels
    0x075B, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0xF81F, 0x0000, 0x039D,   // 0x0170 (368) pixels
    0x039D, 0x039D, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F,   // 0x0180 (384) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000, 0xF81F,   // 0x0190 (400) pixels
    0x0000, 0x075B, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000,   // 0x01A0 (416) pixels
    0x039D, 0x039D, 0x075B, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01B0 (432) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x0000, 0x0000, 0x039D, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0xF81F,   // 0x01C0 (448) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x039D, 0x039D, 0x075B, 0x075B,   // 0x01D0 (464) pixels
    0x075B, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01E0 (480) pixels
    0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x039D, 0x075B, 0x075B, 0x0000, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x01F0 (496) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000,   // 0x0200 (512) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0210 (528) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D,   // 0x0220 (544) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0230 (560) pixels
    0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0240 (576) pixels
  },
  // Frame 5
  {
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B,   // 0x0040 (64) pixels
    0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0050 (80) pixels
    0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x0070 (112) pixels
    0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0080 (128) pixels
    0x0000, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0090 (144) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00A0 (160) pixels
    0x039D, 0x039D, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x00B0 (176) pixels
    0x0000, 0x075B, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000,   // 0x00D0 (208) pixels
    0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B,   // 0x00E0 (224) pixels
    0x075B, 0x0000, 0x039D, 0xFED5, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0xFED5, 0xFFFF, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
    0x0000, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x075B, 0x075B,   // 0x0110 (272) pixels
    0x0000, 0x075B, 0x075B, 0x0000, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0120 (288) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0130 (304) pixels
    0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D,   // 0x0140 (320) pixels
    0x039D, 0x039D, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0150 (336) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x039D, 0x039D, 0x0000, 0x075B, 0x075B, 0x0000,   // 0x0160 (352) pixels
    0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x0170 (368) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0180 (384) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x039D, 0x0000, 0x075B, 0x0000,   // 0x0190 (400) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01A0 (416) pixels
    0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01B0 (432) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000, 0xF81F,   // 0x01C0 (448) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000,   // 0x01D0 (464) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01E0 (480) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x01F0 (496) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D,   // 0x0200 (512) pixels
    0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0210 (528) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F,   // 0x0220 (544) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0230 (560) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0240 (576) pixels
  },
  // Frame 6
  {
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0010 (16) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0020 (32) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0030 (48) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0050 (80) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0060 (96) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B,   // 0x0070 (112) pixels
    0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0080 (128) pixels
    0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0090 (144) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000,   // 0x00A0 (160) pixels
    0x075B, 0x075B, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00B0 (176) pixels
    0x0000, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00C0 (192) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x075B, 0x039D, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00D0 (208) pixels
    0x039D, 0x039D, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000,   // 0x00E0 (224) pixels
    0x0000, 0x075B, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x00F0 (240) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x0000, 0x039D, 0xFED5, 0xFFFF, 0xFFFF, 0x0000, 0x0000,   // 0x0100 (256) pixels
    0xFED5, 0x0000, 0xFFFF, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x075B,   // 0x0110 (272) pixels
    0x075B, 0x075B, 0x0000, 0xFED5, 0xFED5, 0xFFFF, 0xFFFF, 0xFFFF, 0xFED5, 0xFFFF, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0120 (288) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x075B, 0x0000, 0x075B, 0x075B, 0xFED5, 0x0000, 0x0000, 0x0000,   // 0x0130 (304) pixels
    0x0000, 0xFED5, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000,   // 0x0140 (320) pixels
    0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0xFED5, 0xFED5, 0xFED5, 0xFED5, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0150 (336) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0x0000, 0x075B, 0x075B, 0x075B, 0x075B, 0x075B, 0x0000, 0x0000,   // 0x0160 (352) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0xF81F, 0x0000,   // 0x0170 (368) pixels
    0x039D, 0x075B, 0x0000, 0x075B, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F,   // 0x0180 (384) pixels
    0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x039D, 0x039D, 0x075B, 0x0000, 0x075B, 0x075B, 0x039D, 0x039D,   // 0x0190 (400) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x075B,   // 0x01A0 (416) pixels
    0x039D, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01B0 (432) pixels
    0x0000, 0x039D, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B, 0x039D, 0x039D, 0x039D, 0x039D, 0x075B, 0x075B, 0x075B,   // 0x01C0 (448) pixels
    0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x0000, 0x039D, 0x039D, 0x075B, 0x075B,   // 0x01D0 (464) pixels
    0x075B, 0x0000, 0x0000, 0x0000, 0x075B, 0x075B, 0x075B, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x01E0 (480) pixels
    0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x039D, 0x039D, 0x075B, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D,   // 0x01F0 (496) pixels
    0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000,   // 0x0200 (512) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0210 (528) pixels
    0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0x0000, 0x039D, 0x039D, 0x039D, 0x039D,   // 0x0220 (544) pixels
    0x039D, 0x039D, 0x039D, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0230 (560) pixels
    0xF81F, 0xF81F, 0xF81F, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF81F, 0xF81F, 0xF81F, 0xF81F,   // 0x0240 (576) pixels
  }
};

uint8_t currFrame = 0;

void pixel_time_test(uint8_t draw_time) {
  Serial.print("Pixel draw latency in us: ");
  unsigned long start_timer=micros();
  display.drawPixel(1,1,0);
  unsigned long delta_timer=micros()-start_timer;
  Serial.println(delta_timer);

  Serial.print("Display update latency in us: ");
  start_timer=micros();
  display.display(draw_time);
  delta_timer=micros()-start_timer;
  Serial.println(delta_timer);

  display.clearDisplay();
  display.setTextColor(myCYAN);
  display.setCursor(2,0);
  display.print("Mega Man");
  display.setTextColor(myMAGENTA);
  display.setCursor(2,8);
  display.print("By: Wes");

  yield();
  delay(3000);
}


void drawBackground() {
  uint16_t bkgColor = display.color565(0, 0, 128);
  display.fillScreen(bkgColor);
}

void drawBitmap (int x, int y, int imageH, int imageW, const uint16_t * imagePointer) {
  int counter = 0;
  uint16_t pixel;
  bool useAlpha = true;
  uint16_t alpha = 0xF81F;
  
  for (int yy = 0; yy < imageH; yy++) {
    for (int xx = 0; xx < imageW; xx++) {
      pixel = pgm_read_word(&(imagePointer[counter]));
      // Replace Background with other color
      if (useAlpha) {
        // if pixel matches alpha color, then we don't draw it
        if (pixel != alpha) {
          // skip alpha pixels
          display.drawPixel(xx + x, yy + y, pixel);
        } 
      } else {
        display.drawPixel(xx + x, yy + y, pixel);
      }
      counter++;
    }
  }
}

void drawClock() {
  uint16_t bkgColor = display.color565(51,102,255);
  int boxX = 30;
  int boxY = 2;
  int boxW = 33;
  int boxH = 11;
  int fillX = boxX + 1;
  int fillY = boxY + 1;
  int fillW = boxW - 2;
  int fillH = boxH - 2;
  int timeX = boxX + 1;
  int timeY = boxY + 1;
  display.drawRect(boxX,boxY,boxW,boxH,myBLUE);
  display.fillRect(fillX,fillY,fillW,fillH,myBLACK);

  drawTime(timeX,timeY);
}

void drawTime(int x, int y) {
  display.setCursor(x,y);
  int numW = 7;
  int numH = 9;
  int sepW = 3;
  int sepH = numH;
  int maxTimeChars = 5;
  getClockDisplayTime();
  
  // Retrieves each character from time
  for(int i = 0; i < maxTimeChars; i++) {
    int w = numW;
    int h = numH;
    char t = theTime[i];
    int theX = 0;
    if (':' == t) {
      h = sepH;
      w = sepW;
      theX = x + (numW * 2);
      drawBitmap(theX, y, h, w, (const uint16_t *) &clockSep);
    } else {
      int index = t - '0'; // convert char to int
      theX = x + (numW * i);
      if (i > 2) {
        // Last 2 digits
        theX = x - numW + sepW + (numW * i);
      } 
      drawBitmap(theX, y, h, w, (const uint16_t *) &nums[index]);
    }
  }
}


void getClockDisplayTime() {
  // digital clock display of the time

  int intH = hour();
  int intM = minute();
  char theHour[3];
  char theMin[3];
  itoa(intH, theHour, 10);
  itoa(intM, theMin, 10);
  strcpy(theTime, "");
  
  if (intH < 10) {
    strncat(theTime, "0",1);
    strncat(theTime, theHour,1);
  } else {
    strncat(theTime, theHour,2);
  }
  strncat(theTime,":",1);
  
  if (intM < 10) {
    strcat(theTime, "0");
    strncat(theTime, theMin,1);
  } else {
    strncat(theTime, theMin,2);
  }
}


void playMegaman() {
  unsigned long currentMillis = millis();
  long elapsed = currentMillis - previousMillis;
  uint16_t refreshSpeed = 250; // in ms, lower is faster
  int totalFrames = sizeof(script) - 1;

  // draw Image
  drawBitmap(0, 8, 24, 24, (const uint16_t *) &images[currFrame]);
  
  if (elapsed >= refreshSpeed) {
    previousMillis = currentMillis;
    // Change to next image
    frameIndex++;
    if (frameIndex > totalFrames) {
      frameIndex = 0;
    }
    currFrame = script[frameIndex];
  }
}

// ISR for display refresh
void display_updater() {
  display.display(display_draw_time);
}

void convertUnixToStringTime(unsigned long epoch) {
  int hour, minutes, seconds;
  
  hour = (epoch  % 86400L) / 3600;
  minutes = (epoch  % 3600) / 60;
  seconds = (epoch % 60) < 10;
}

void setup() {
  Serial.begin(9600);

  // Wifi
    Serial.print("Connecting to: ");
    Serial.println(ssid);
    WiFi.begin(ssid,pass);
  
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");
  
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
  
    Serial.println("Starting UDP");
    Udp.begin(localPort);
    Serial.print("Local port: ");
    Serial.println(Udp.localPort());
    Serial.println("waiting for sync");
    setSyncProvider(getNtpTime);
    setSyncInterval(300);
  
  sinX = 0;
  xPos = 0;
  
  // Define your display layout here, e.g. 1/8 step
  display.begin(16);

  display_ticker.attach(0.002, display_updater);
  yield();
  
  display.clearDisplay();  
  pixel_time_test(0);

  drawBackground();
}

void loop() {
  display.clearDisplay();
  // Time 
  
  drawBackground();
  playMegaman();
  drawClock();
}


/*-------- NTP code ----------*/
time_t getNtpTime() {
  IPAddress ntpServerIP; // NTP server's ip address

  while (Udp.parsePacket() > 0) ; // discard any previously received packets
  Serial.println("Transmit NTP Request");
  // get a random server from the pool
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE);  // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 =  (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address) {
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123); //NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}
